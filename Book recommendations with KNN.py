# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B7WXwGTz0tD62VeU_HvuswuzgMya7yxZ
"""

# import libraries
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'
users_filename = 'BX-Users.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

df_users = pd.read_csv(
    users_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'location', 'age'])

df_books.head()

df_ratings

df_users

# counting users' reviews and removing data for statistical significance
reviews_count = pd.DataFrame(df_ratings.groupby('user')['rating'].count())

index_reviews = reviews_count[reviews_count['rating'] < 100 ].index
reviews_count.drop(index_reviews, inplace = True)
reviews_count = reviews_count.reset_index()
reviews_count.sort_values('rating', ascending=False)

# counting books' reviews and removing data for statistical significance
rating_count = pd.DataFrame(df_ratings.groupby('isbn')['rating'].count())

index_ratings = rating_count[rating_count['rating'] < 100 ].index
rating_count.drop(index_ratings, inplace = True)
rating_count = rating_count.reset_index()
rating_count.sort_values('rating', ascending=False)

# combining cleaned datasets
cleaned_users = df_ratings[df_ratings['user'].isin(reviews_count['user'])].dropna()
cleaned_books = df_ratings[df_ratings['isbn'].isin(rating_count['isbn'])].dropna()
cleaned_df = cleaned_users[cleaned_users['isbn'].isin(cleaned_books['isbn'])].dropna()
cleaned_df

# adding average rating to the books
average_rating = pd.DataFrame(cleaned_df.groupby('isbn')['rating'].mean().round(2))
average_rating['reviews'] = pd.DataFrame(cleaned_df.groupby('isbn')['rating'].count())
average_rating = average_rating.reset_index()
average_rating

# combining cleaned dataset with book titles/authors
combined_df = pd.merge(cleaned_df, df_books, on='isbn')
combined_df = combined_df.dropna(axis = 0, subset = ['title'])
combined_df

combined_df = combined_df.drop_duplicates(['user', 'title'])
combined_df_pivot = combined_df.pivot(index = 'title', columns = 'user', values = 'rating').fillna(0)
combined_df_matrix = csr_matrix(combined_df_pivot.values)

model_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model_knn.fit(combined_df_matrix)

# function to return recommended books
def get_recommends(book = ""):
  def find_query_index(book):
    for i in range(combined_df_pivot.shape[0]):
      if book in combined_df_pivot.index[i]:
        return(i)

  query_index = find_query_index(book)
  distances, indices = model_knn.kneighbors(combined_df_pivot.iloc[query_index, :].values.reshape(1, -1), n_neighbors = 5)
  recommended_books = []
  for i in range(0, len(distances.flatten())):
      if i == 0:
          #print('Recommendations for {0}:\n'.format(combined_df_pivot.index[query_index]))
          recommended_books.append(combined_df_pivot.index[query_index])
          pass
      else:
          #print('{0}: {1}, with distance of {2:.2f}:'.format(i, combined_df_pivot.index[indices.flatten()[i]], round(distances.flatten()[i], 2)))
          recommended_books.append((combined_df_pivot.index[indices.flatten()[i]],float(distances.flatten()[i])))

  return recommended_books

get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["The Lovely Bones: A Novel", 'The Weight of Water', 'I Know This Much Is True', 'The Poisonwood Bible']
  recommended_books_dist = [0.76, 0.78, 0.82, 0.82]
  for i in range(2):
    if recommends[i+1][0] not in recommended_books:
      test_pass = False
    if abs(recommends[i+1][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()